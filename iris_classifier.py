# -*- coding: utf-8 -*-
"""iris_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cDFr6yXAs7FNK-EE3DkqTrmxXqLjpeX_
"""

from sklearn.datasets import load_iris
 from pandas.plotting import scatter_matrix
 import pandas as pd
 import numpy as np
 import matplotlib.pyplot as plt
 from sklearn.model_selection import train_test_split
 from sklearn.neighbors import KNeighborsClassifier

dados_iris = load_iris()

dados_iris

dados_iris.keys()

dados_iris.DESCR

print(dados_iris["DESCR"])

print(dados_iris["data"][:5])

print(dados_iris["target"][:5])

print(dados_iris["target_names"])

print(dados_iris["feature_names"])

X_train, X_test, y_train, y_test = train_test_split(dados_iris["data"], dados_iris["target"],random_state=0,test_size=0.25)

print("treino: {}".format(X_train.shape))
print("teste: {}".format(X_test.shape))

iris_dataframe = pd.DataFrame(X_train,columns=dados_iris.feature_names)
grr = scatter_matrix(iris_dataframe, c=y_train, marker='o',hist_kwds={'bins': 20},s=60,alpha=.8,figsize=(15,15))

knn = KNeighborsClassifier(n_neighbors=3)

knn.fit(X_train,y_train)

print("treino: {}".format(knn.score(X_train, y_train)))
print("teste: {}".format(knn.score(X_test,y_test)))

dados_iris = load_iris()

def retorna_resultado_knn(random_state,quantidade,dados,respostas):
  X_train, X_test, y_train, y_test = train_test_split(dados, respostas, random_state=random_state)
  quantidade_k = range(1,quantidade+1)
  res_teste = []
  res_treino = []

  for i in quantidade_k:
    knn = KNeighborsClassifier(n_neighbors = i)
    knn.fit(X_train, y_train)

    res_treino.append(knn.score(X_train, y_train))
    res_teste.append(knn.score(X_test, y_test))
  
  return quantidade_k, res_treino, res_teste

quantidade_k, res_treino, res_teste = retorna_resultado_knn(1,20,dados_iris['data'],dados_iris['target'])
i = 3
print('Treino {} : {}'.format(i,res_treino[i]))
print('Teste {} : {}'.format(i,res_teste[i]))